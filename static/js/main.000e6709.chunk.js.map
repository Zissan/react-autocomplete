{"version":3,"sources":["lib/Card.js","lib/keys.js","lib/utils.js","lib/withAutomcomplete.js","components/SearchBox/index.js","lib/hooks/useFilter.js","App.js","serviceWorker.js","index.js"],"names":["Card","htmlId","onMouseEnter","onMouseLeave","onClick","props","className","tabIndex","id","children","KEYS","getIndexFromID","idPrefix","indexOf","parseInt","replace","Component","withAutomcomplete","name","type","onChange","placeholder","value","error","classList","forwardedRef","join","ref","forwardRef","items","renderItem","primaryKey","onReady","htmlInput","htmlDiv","onSelect","item","noResultText","reset","itemIdPrefix","resultsRef","useRef","inputRef","currentChildrenIndex","filteredItemsRef","filteredItems","keyword","useState","setFilteredItems","useEffect","filter","Object","values","toLowerCase","useFilter","resultsRefConst","current","inputRefConst","addEventListener","handleResultsKeydown","handleInputKeydown","handleInputFocus","style","width","document","hideResultList","removeEventListener","length","contains","remove","event","key","toUpperCase","add","el","rect","getBoundingClientRect","left","window","scrollX","top","scrollY","getOffset","handleSelect","index","focus","count","handleMouseEnter","target","handleMouseLeave","handleMouseClick","map","App","setValue","handleReady","useCallback","inputHtml","data","users","address","pincode","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.000e6709.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Card = ({ htmlId, onMouseEnter, onMouseLeave, onClick, ...props }) => {\r\n  return (\r\n    <div\r\n      className=\"autocomplete__result\"\r\n      tabIndex=\"0\"\r\n      id={htmlId}\r\n      onMouseEnter={onMouseEnter}\r\n      onMouseLeave={onMouseLeave}\r\n      onClick={onClick}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nCard.propTypes = {\r\n  /** Unique HTML ID. Handy hook for automated testing. */\r\n  htmlId: PropTypes.string,\r\n\r\n  /** Function to call onChange */\r\n  onMouseEnter: PropTypes.func.isRequired,\r\n\r\n  /** Function to call onChange */\r\n  onMouseLeave: PropTypes.func.isRequired,\r\n\r\n  /** Child component to display next to the input */\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Card;\r\n","export const KEYS = {\r\n  ARROWDOWN: \"ARROWDOWN\",\r\n  ARROWUP: \"ARROWUP\",\r\n  ENTER: \"ENTER\",\r\n  ESCAPE: \"ESCAPE\",\r\n};\r\n","export function getOffset(el) {\r\n  const rect = el.getBoundingClientRect();\r\n  return {\r\n    left: rect.left + window.scrollX,\r\n    top: rect.top + window.scrollY,\r\n  };\r\n}\r\n\r\nexport function getIndexFromID(id, idPrefix) {\r\n  if (id.indexOf(idPrefix) === -1) return -1;\r\n  return parseInt(id.replace(idPrefix, \"\"));\r\n}\r\n","import React, { forwardRef, useRef, useEffect } from \"react\";\r\nimport Card from \"./Card\";\r\nimport { useFilter } from \"./hooks\";\r\nimport { KEYS } from \"./keys\";\r\nimport { getOffset, getIndexFromID } from \"./utils\";\r\n\r\n/**\r\n *\r\n * @param {*} Component : Any text input component can be converted to auto complete by\r\n * passing through this HOC. Here in this case SearchBox component is passed through withAutocomplete.\r\n * ON PRESSING [ESC] ITEM LIST CAN BE CLOSED\r\n */\r\nexport const withAutomcomplete = (Component) => {\r\n  return forwardRef(\r\n    (\r\n      {\r\n        items = [],\r\n        renderItem,\r\n        primaryKey,\r\n        onReady = (htmlInput, htmlDiv) => {},\r\n        onSelect = (item) => {},\r\n        noResultText = \"No items matches the result.\",\r\n        reset = () => {},\r\n        itemIdPrefix = \"autocomplete-\",\r\n        ...props\r\n      },\r\n      ref\r\n    ) => {\r\n      const resultsRef = useRef(null);\r\n      const inputRef = useRef(null);\r\n      const currentChildrenIndex = useRef(0);\r\n      const filteredItemsRef = useRef([]);\r\n\r\n      const filteredItems = useFilter(items, props.value);\r\n\r\n      useEffect(() => {\r\n        const resultsRefConst = resultsRef.current;\r\n        const inputRefConst = inputRef.current;\r\n        resultsRef.current.addEventListener(\"keydown\", handleResultsKeydown);\r\n        inputRef.current.addEventListener(\"keydown\", handleInputKeydown);\r\n        inputRef.current.addEventListener(\"focus\", handleInputFocus);\r\n        resultsRef.current.style.width = inputRef.current.style.width;\r\n        onReady(inputRef.current, resultsRef.current);\r\n        document.addEventListener(\"keydown\", hideResultList);\r\n        return () => {\r\n          resultsRefConst.removeEventListener(\"keydown\", handleResultsKeydown);\r\n          inputRefConst.removeEventListener(\"keydown\", handleInputKeydown);\r\n          inputRefConst.removeEventListener(\"focus\", handleInputFocus);\r\n          document.removeEventListener(\"click\", hideResultList);\r\n        };\r\n      }, []);\r\n\r\n      useEffect(() => {\r\n        filteredItemsRef.current = filteredItems;\r\n        if (filteredItems.length) {\r\n          if (resultsRef.current.classList.contains(\"hide\")) {\r\n            resultsRef.current.classList.remove(\"hide\");\r\n          }\r\n          const { children } = resultsRef.current;\r\n          if (\r\n            currentChildrenIndex.current &&\r\n            children[currentChildrenIndex.current]\r\n          ) {\r\n            children[currentChildrenIndex.current].classList.remove(\"active\");\r\n          }\r\n          currentChildrenIndex.current = 0;\r\n        }\r\n      }, [filteredItems]);\r\n\r\n      /**\r\n       * COMMON EVENTS FOR MOUSE AND KEYBOARD EVENTS STARTS HERE\r\n       */\r\n      const hideResultList = (event) => {\r\n        const key = event.key.toUpperCase();\r\n        if (key !== KEYS.ESCAPE) return;\r\n        if (!resultsRef.current.classList.contains(\"hide\")) {\r\n          resultsRef.current.classList.add(\"hide\");\r\n        }\r\n      };\r\n\r\n      const handleInputFocus = (event) => {\r\n        const { left, top } = getOffset(inputRef.current);\r\n        resultsRef.current.style.left = left;\r\n        resultsRef.current.style.top = top;\r\n        if (resultsRef.current.classList.contains(\"hide\")) {\r\n          resultsRef.current.classList.remove(\"hide\");\r\n        }\r\n      };\r\n\r\n      const handleSelect = (index) => {\r\n        const item = filteredItemsRef.current[index];\r\n        inputRef.current.focus();\r\n        onSelect(item);\r\n        if (!resultsRef.current.classList.contains(\"hide\")) {\r\n          resultsRef.current.classList.add(\"hide\");\r\n        }\r\n      };\r\n      /**\r\n       * COMMON EVENTS FOR MOUSE AND KEYBOARD EVENTS ENDS HERE\r\n       */\r\n\r\n      /**\r\n       * KEYBOARD EVENTS HANDLING STARTS FROM HERE\r\n       */\r\n      const handleResultsKeydown = (event) => {\r\n        const { children } = resultsRef.current;\r\n        const count = children.length;\r\n        const key = event.key.toUpperCase();\r\n        switch (key) {\r\n          case KEYS.ARROWUP: {\r\n            children[currentChildrenIndex.current].classList.remove(\"active\");\r\n            if (currentChildrenIndex.current === 0) {\r\n              /**\r\n               * REACHED TOP ITEM\r\n               * MOVING FOCUS TO THE INPUT COMPONENT\r\n               */\r\n              inputRef.current.focus();\r\n              return;\r\n            }\r\n            currentChildrenIndex.current--;\r\n            children[currentChildrenIndex.current].classList.add(\"active\");\r\n            return;\r\n          }\r\n          case KEYS.ARROWDOWN: {\r\n            if (currentChildrenIndex.current === count - 1) {\r\n              /**\r\n               * REACHED LAST ITEM\r\n               */\r\n              return;\r\n            }\r\n            children[currentChildrenIndex.current].classList.remove(\"active\");\r\n            currentChildrenIndex.current++;\r\n            children[currentChildrenIndex.current].classList.add(\"active\");\r\n            return;\r\n          }\r\n          case KEYS.ENTER: {\r\n            children[currentChildrenIndex.current].classList.remove(\"active\");\r\n            handleSelect(currentChildrenIndex.current);\r\n            return;\r\n          }\r\n          default:\r\n            break;\r\n        }\r\n      };\r\n\r\n      const handleInputKeydown = (event) => {\r\n        const { children } = resultsRef.current;\r\n        const key = event.key.toUpperCase();\r\n        if (key === KEYS.ARROWDOWN && children.length) {\r\n          children[currentChildrenIndex.current].focus();\r\n          children[currentChildrenIndex.current].classList.add(\"active\");\r\n          return;\r\n        }\r\n      };\r\n\r\n      /**\r\n       * KEYBOARD EVENTS HANDLING ENDS HERE\r\n       */\r\n\r\n      /**\r\n       * MOUSE EVENTS HANDLING STARTS FROM HERE\r\n       */\r\n      const handleMouseEnter = ({ target }) => {\r\n        const { id } = target;\r\n        const index = getIndexFromID(id, itemIdPrefix);\r\n\r\n        const { children } = resultsRef.current;\r\n        children[currentChildrenIndex.current].classList.remove(\"active\");\r\n\r\n        if (!children[index]) return;\r\n        currentChildrenIndex.current = index;\r\n        children[currentChildrenIndex.current].classList.add(\"active\");\r\n      };\r\n\r\n      const handleMouseLeave = ({ target }) => {\r\n        const { id } = target;\r\n        const index = getIndexFromID(id, itemIdPrefix);\r\n\r\n        const { children } = resultsRef.current;\r\n\r\n        if (!children[index]) return;\r\n        currentChildrenIndex.current = index;\r\n        children[currentChildrenIndex.current].classList.remove(\"active\");\r\n      };\r\n\r\n      const handleMouseClick = ({ target }) => {\r\n        const { id } = target;\r\n        const index = getIndexFromID(id, itemIdPrefix);\r\n\r\n        const { children } = resultsRef.current;\r\n\r\n        if (!children[index]) return;\r\n        currentChildrenIndex.current = index;\r\n        children[currentChildrenIndex.current].classList.remove(\"active\");\r\n        handleSelect(currentChildrenIndex.current);\r\n      };\r\n\r\n      /**\r\n       * MOUSE EVENTS HANDLING ENDS HERE\r\n       */\r\n\r\n      return (\r\n        <>\r\n          <span className=\"autocomplete__clear__text\" onClick={reset}>\r\n            X\r\n          </span>\r\n          <Component {...props} forwardedRef={inputRef} />\r\n          <div className=\"autocomplete__results\" ref={resultsRef} tabIndex=\"0\">\r\n            {filteredItems.map((item, index) => {\r\n              return (\r\n                <Card\r\n                  key={item[primaryKey]}\r\n                  {...item}\r\n                  htmlId={`${itemIdPrefix}${index}`}\r\n                  onMouseEnter={handleMouseEnter}\r\n                  onMouseLeave={handleMouseLeave}\r\n                  onClick={handleMouseClick}\r\n                >\r\n                  {renderItem(item)}\r\n                </Card>\r\n              );\r\n            })}\r\n            {props.value && !filteredItems.length ? (\r\n              <div className=\"autocomplete__no__results\">{noResultText}</div>\r\n            ) : null}\r\n          </div>\r\n        </>\r\n      );\r\n    }\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { withAutomcomplete } from \"../../lib\";\r\n\r\nconst SearchBox = ({\r\n  htmlId,\r\n  name,\r\n  type = \"text\",\r\n  onChange,\r\n  placeholder,\r\n  value,\r\n  error,\r\n  children,\r\n  classList,\r\n  forwardedRef,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <>\r\n      <input\r\n        id={htmlId}\r\n        type={type}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n        className={`${classList.join(\" \")} ${\r\n          error ? \"searchBox__input--error\" : \"\"\r\n        }`}\r\n        ref={forwardedRef}\r\n        {...props}\r\n      />\r\n      {children}\r\n      {error && <div className=\"searchBox__error\">{error}</div>}\r\n    </>\r\n  );\r\n};\r\n\r\nSearchBox.propTypes = {\r\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n  htmlId: PropTypes.string,\r\n\r\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\r\n  name: PropTypes.string,\r\n\r\n  /** Input type */\r\n  type: PropTypes.oneOf([\"text\", \"number\", \"password\"]),\r\n\r\n  /** Function to call onChange */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Placeholder to display when empty */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Value */\r\n  value: PropTypes.any,\r\n\r\n  /** String to display when error occurs */\r\n  error: PropTypes.string,\r\n\r\n  /** Child component to display next to the input */\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default withAutomcomplete(SearchBox);\r\n","import { useEffect, useState } from \"react\";\r\n\r\nexport function useFilter(items, keyword) {\r\n  const [filteredItems, setFilteredItems] = useState([]);\r\n  useEffect(() => {\r\n    setFilteredItems(\r\n      keyword\r\n        ? items.filter((item) => {\r\n            return (\r\n              Object.values(item)\r\n                .join(\" \")\r\n                .toLowerCase()\r\n                .indexOf(keyword.toLowerCase()) > -1\r\n            );\r\n          })\r\n        : []\r\n    );\r\n  }, [items, keyword]);\r\n\r\n  return filteredItems;\r\n}\r\n","import React, { useState, useRef, useCallback } from \"react\";\nimport \"./App.css\";\nimport { data } from \"./data.json\";\nimport SearchBox from \"./components/SearchBox\";\nimport \"./lib/styles.css\";\n\nfunction App() {\n  const inputRef = useRef(null);\n  const [value, setValue] = useState(\"\");\n  const handleChange = ({ target }) => {\n    setValue(target.value);\n  };\n\n  const handleSelect = ({ name }) => {\n    setValue(name);\n  };\n\n  const handleReady = useCallback((inputHtml) => {\n    inputHtml.focus();\n  }, []);\n\n  const handleReset = () => {\n    setValue(\"\");\n  };\n  return (\n    <div>\n      <header className=\"app__header\">\n        <div className=\"app__header--wrapper\">\n          <SearchBox\n            items={data.users}\n            renderItem={({ id, name, address, pincode, items }) => {\n              return (\n                <>\n                  <label>\n                    <strong>{id}</strong>\n                  </label>\n                  <p className=\"render__name\">{name}</p>\n                  <address>\n                    {address}, {pincode}, {items.join(\", \")}\n                  </address>\n                </>\n              );\n            }}\n            primaryKey={\"id\"}\n            onChange={handleChange}\n            value={value}\n            ref={inputRef}\n            onReady={handleReady}\n            onSelect={handleSelect}\n            placeholder=\"Search users by ID, address, name...\"\n            classList={[\"searchBox__input\"]}\n            noResultText=\"No User Found\"\n            reset={handleReset}\n          />\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}